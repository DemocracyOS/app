#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var exists = fs.existsSync;
var read = fs.readFileSync;
var write = fs.writeFileSync;
var path = require('path');
var resolve = path.resolve;
var merge = require('merge-util');
var exec = require('child_process').exec;
var program = require('commander');
var installc = resolve('./node_modules/.bin/component-install');
var crypto = require('crypto');
var env = process.env.NODE_ENV || 'development';
var RETRY_LIMIT = 10;

program
  .option('-c, --config', 'copy and/or merge configuration file')
  .option('-C, --no-components', 'ignore components install')
  .parse(process.argv);


/**
 * Make sure there is a config file
 */

if (program.config && env !== 'production') {
  var dest = resolve('./config/' + env + '.json');
  if (!exists(dest)) {
    console.log('Creating ' + dest);
    var defaults = require(resolve('./config/defaults'));

    var config = {
      jwtSecret: crypto.randomBytes(32).toString('hex')
    };

    [
      "protocol",
      "host",
      "publicPort",
      "mongoUrl",
      "locale",
      "organizationName",
      "organizationUrl",
    ].forEach(function(key){
      config[key] = defaults[key];
    });

    write(dest, JSON.stringify(config, null, 2));
  }
}

if (program.components && exists(installc)) {
    return attemptInstall(0);
}

/**
 * Retry the install RETRY_LIMIT times.
 */
function attemptInstall (retryCount, error) {

  if (error) {
    console.log(error);
    console.log('retrying, attempt %n of %n', retryCount, RETRY_LIMIT);
    return attemptInstall(retryCount);
  }

  if (retryCount >= RETRY_LIMIT) {
    console.log('retry limit exceeded. Aborting');
    return process.exit(1);
  }

  exec(installc, function(err, stdout, stderr) {
    if (stdout.length) console.log(stdout);
    if (stderr.length) return attemptInstall(retryCount + 1, stderr);
    if (err != null) return attemptInstall(retryCount + 1, err);
  });

}
